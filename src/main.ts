import "./style.scss";
import Sfx, { Sound } from "./sfx";
import { on, $ } from "./common";
import GameScene from "./Game/GameScene";
import Sprite from "./Game/Sprite";
import config from "./config";
import { GameStatus } from "./Game/Hud";
import { TileMap } from "./Game/TileMap";

const canvas = $("#game") as HTMLCanvasElement;
const ctx = canvas.getContext("2d");
const keys: boolean[] = [];
const maps: string[] = [
    "0316061704152113031a021a011391160219021a021a021b021b021a03184104180517061903172111031a0116011a021a0219031904180617061705180321164111011w31021831031731051631061631061632051804180314011401160213211603190319031161170312021503120215021303140114031903190319021a011a411b011a02192102190418051705193102193102193101150114310114031331150313314114031331160114311b3113711702190318042117061606150311041402120418021a011z1e581z1802192103180418041804180331180331190231190131140319033117043117053116310431163104311731033118033118023119011n211p021203150213310214021331021402133102140715021331021402133102140211611131021402133102140212031z1q211z12311a3101311831033116310531143103",
    "0316054116310414911231031931011b311r3103142112310516310516310516310517310319331t011b02125612021a0119410119310218310371173103173104311631021201311502130131150112211101311a01311a01311a0231190331180331115611033118023119321v031705150532140432150319021a021f021a02190317043112083113073114371t211r021a02126117021541140319031a031a021q32143503133108130213021502112118021a031a031s411b411b411t31011931021831031731031831021601120315021202150318041804180518041805190319041903115711021a021a011335173517327132173517351t591r081402150114021361110114021501122111051201140512011402150114021141130114021501140215011z1e211z1d321a023118043117053115071403",
    "0316051804149114021a03180517061309130411011j211f01122118021a021a0314331303133313031333140217011b011a02211u021a03150114021403190311611421130114011a031903122117021h0219041903154114011x5712011a03180418041804190418051321140419041805170616061607350735073507350616031a0218711d211l011b01190319034118034115011203150212031403130213051202130513011306160716061121311405123214031333140113011133160219031a021b011d5911711o0117011303150212041402120414021304130214031302150114011t581m341731044115310541143106411331031831021931011t411z1132081232031732031732031732031261132132031732031732031732031732081j211t011404120213043112021204311302110431140631140714081305",
    "0319021921011b011591130219032118031a021a31011b31011a31021931031731041704311704311704311704311721023119011c211s0318051705170517051705170418031a0112211t581e311b321a371401391201213812013813413813413714410135150333150531150631146107140854081408140812211108140854081408140811211208140854081408122111081408140854081408140814073114310631153104311731023116711131023118310231183102311731031831021903411704411704411605170516061606211407150715071606160617051706164105411704180518041921031433120412351104123511041333120321180319021a021a0112581d41125811411z1202112112021402130314021203150614611105122111711205170616021203150213031402112112021h561301411903380536063606360537410438033a011c",
    "0316061606129113051741041721032118310241183103311631053114310714081408140814081408140814081407311421063115053116310321183102193102193101611a311434180418041804112113211204180441180413411404173104163204143404133307123307123302173215211g411a711z125a1p3418350215350215340315330411211333041532410415320614311305133115031331126118311b01311a0131192101311a021a011b01115911011b011a04180516410516021a02126117023118033216410333150433150433140532144105311506150715071341081309130913091309130913091408170531142112043217021171311a321921311m31125612321a3419351735183418341156113301183112021a04190313211503190418041341211361041903193313411n0131135611021a023118041731041121150516310516053116043116410418041333120517061603",
];
let scene = new GameScene(new TileMap(maps[0]));
let running = false;
let time = new Date().getTime();

function render() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    scene.render(ctx);
}

function update() {
    const now = new Date().getTime();
    const delta = now - time;
    requestAnimationFrame(update);
    scene.update(delta < 34 ? delta : 34);
    time = now;
    render();
}

function bind() {
    const body = document.body;
    on(document, "keydown", (e: KeyboardEvent) => {
        keys[e.keyCode] = true;
        scene.input(keys, true);
    });
    on(document, "keyup", (e: KeyboardEvent) => {
        keys[e.keyCode] = false;
        scene.input(keys, false);
    })
    on(body, "mousedown", (e: MouseEvent) => {
        keys[e.button] = true;
        scene.input(keys, true);
    });
    on(body, "mouseup", (e: MouseEvent) => {
        keys[e.button] = false;
        scene.input(keys, false);
    });
    on(body, "mousemove", (e: MouseEvent) => {
        const ratio = canvas.height / body.clientHeight;
        const left = (body.clientWidth * ratio - canvas.width) / 2
        scene.pointer(e.clientX * ratio - left, e.clientY * ratio);
    });
    on(document, "contextmenu", (e: MouseEvent) => e.preventDefault());
}

on(window, "load", async () => {
    bind();
    await Sprite.load(require("./assets/texture.png"), require("./assets/texture.json"));
    await Sprite.tint(ctx, .8, .3, .1); // brown
    await Sprite.tint(ctx, .4, .9, .4); // green
    await Sprite.tint(ctx, 1, .9, 0); // yellow
    await Sprite.tint(ctx, .1, 1, 1); // cyan
    await Sprite.tint(ctx, .8, .1, 1); // purple
    canvas.width = config.cam.width;
    canvas.height = config.cam.height;
    canvas.style.display = "block";
    update();
    render();
});

on(canvas, "mousedown", async () => {
    if (running) {
        switch (scene.hud.satus) {
            case GameStatus.run:
                return;
            case GameStatus.start:
                scene.hud.satus = GameStatus.run;
                return;
            default:
                scene = new GameScene(new TileMap(maps[0]));
                return;
        }
    }
    await Sfx.init();
    await Promise.all([
        Sfx.sound("hit", new Sound("custom", [2, 1, 0], 1), [110, 0], .2),
        Sfx.sound("fire", new Sound("square", [.2, .1, 0], .2), [660, 110], .1),
        Sfx.sound("eject", new Sound("triangle", [.2, .1, 0], .2), [220, 0], .1),
        Sfx.sound("launch", new Sound("custom", [1, .5, 0], 1), [880, 0], .1),
        Sfx.sound("explode", new Sound("custom", [5, 1, 0], 1), [220, 0], 1),
        Sfx.sound("item", new Sound("square", [.3, .1, 0], 1), [220, 440, 220, 440, 220, 440, 220, 440], .3),
    ]);
    running = true;
    scene.hud.satus = GameStatus.run;
});
